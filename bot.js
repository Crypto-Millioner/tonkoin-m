const TelegramBot = require('node-telegram-bot-api');
const db = require('./database');
const ton = require('./ton');
require('dotenv').config();

const bot = new TelegramBot(process.env.BOT_TOKEN, { polling: true });
const ADMIN_ID = 2109063524;
const PAYMENT_ADDRESS = 'UQD8DLY30eWms-ff-YvfH-LyhrF8Ja3oSR2Imt1I51RKrwio';
const CHANNELS = [
    '@TonKoinMining',
    '@TONClassic_Airdrop',
    '@jsprojectsSell'
];
const adminState = {};

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö —Å—Å—ã–ª–æ–∫
bot.onText(/\/start ref_(\d+)/, async (msg, match) => {
    const userId = msg.from.id;
    const inviterId = parseInt(match[1]);
    
    if (inviterId !== userId) {
        await db.addReferral(inviterId, userId);
        bot.sendMessage(inviterId, `üéâ –ù–æ–≤—ã–π —Ä–µ—Ñ–µ—Ä–∞–ª –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –ø–æ –≤–∞—à–µ–π —Å—Å—ã–ª–∫–µ: @${msg.from.username}`);
    }
    
    handleStart(msg);
});

bot.onText(/\/start/, handleStart);

async function handleStart(msg) {
    const userId = msg.from.id;
    let user = await db.getUser(userId);
    
    if (!user) {
        user = {
            id: userId,
            username: msg.from.username || '',
            balance: 0,
            miningBalance: 0,
            miningRate: 0.0000001000,
            upgraded: false,
            miningActive: false,
            tasksCompleted: [],
            lastMiningUpdate: Date.now()
        };
        await db.saveUser(user);
    }

    const keyboard = {
        reply_markup: {
            keyboard: [
                ['üîÑ –ú–∞–π–Ω–∏–Ω–≥', 'üë• –ü–∞—Ä—Ç–Ω–µ—Ä—ã'],
                ['üìù –ó–∞–¥–∞–Ω–∏—è', 'üí∞ –ë–∞–ª–∞–Ω—Å']
            ],
            resize_keyboard: true
        }
    };

    bot.sendMessage(userId, '–î–µ—Ä–∂–∏ –º–µ–Ω—é üëá', keyboard);
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫
bot.on('message', async (msg) => {
    if (!msg.text) return;
    const userId = msg.from.id;
    const user = await db.getUser(userId);
    if (!user) return;

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
    if (adminState[userId] && adminState[userId].action) {
        const { targetUserId, action } = adminState[userId];
        
        switch(action) {
            case 'edit_balance':
                const newBalance = parseFloat(msg.text);
                if (isNaN(newBalance)) {
                    return bot.sendMessage(userId, '‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.');
                }
                
                await db.updateUser(targetUserId, (u) => {
                    u.balance = newBalance;
                });
                bot.sendMessage(userId, `‚úÖ –ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${targetUserId} –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ ${newBalance} TON`);
                delete adminState[userId];
                return;
                
            case 'edit_mining_rate':
                const newRate = parseFloat(msg.text);
                if (isNaN(newRate)) {
                    return bot.sendMessage(userId, '‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.');
                }
                
                await db.updateUser(targetUserId, (u) => {
                    u.miningRate = newRate;
                });
                bot.sendMessage(userId, `‚úÖ –°–∫–æ—Ä–æ—Å—Ç—å –º–∞–π–Ω–∏–Ω–≥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${targetUserId} –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ ${newRate} TON/—Å–µ–∫`);
                delete adminState[userId];
                return;
        }
    }

    switch (msg.text) {
        case 'üë• –ü–∞—Ä—Ç–Ω–µ—Ä—ã':
            const refCount = await db.getReferralsCount(userId);
            const refLink = `https://t.me/${(await bot.getMe()).username}?start=ref_${userId}`;
            bot.sendMessage(
                userId,
                `üë• –ü–∞—Ä—Ç–Ω–µ—Ä—Å–∫–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞:\n\n` +
                `‚Ä¢ –ó–∞ –∫–∞–∂–¥–æ–≥–æ –¥—Ä—É–≥–∞: 0.005 TON\n` +
                `‚Ä¢ 5% –æ—Ç –¥–æ—Ö–æ–¥–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–∞\n` +
                `‚Ä¢ –†–µ—Ñ–µ—Ä–∞–ª–æ–≤: ${refCount}\n\n` +
                `–í–∞—à–∞ —Å—Å—ã–ª–∫–∞:\n<code>${refLink}</code>`,
                { parse_mode: 'HTML' }
            );
            break;

        case 'üîÑ –ú–∞–π–Ω–∏–Ω–≥':
            if (!user.miningActive) {
                const subscribed = await checkSubscriptions(userId);
                if (subscribed) {
                    await db.updateUser(userId, (u) => {
                        u.miningActive = true;
                        u.lastMiningUpdate = Date.now();
                    });
                    bot.sendMessage(userId, '‚úÖ –ú–∞–π–Ω–∏–Ω–≥ –Ω–∞—á–∞—Ç!');
                } else {
                    const channelList = CHANNELS.map(c => `‚Ä¢ <a href="https://t.me/${c.replace('@', '')}">${c}</a>`).join('\n');
                    bot.sendMessage(
                        userId,
                        `‚ùå –î–ª—è –Ω–∞—á–∞–ª–∞ –º–∞–π–Ω–∏–Ω–≥–∞ –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à–∏ –∫–∞–Ω–∞–ª—ã:\n\n${channelList}`,
                        { parse_mode: 'HTML' }
                    );
                }
            } else {
                await updateMiningBalance(userId);
                const updatedUser = await db.getUser(userId);
                
                const keyboard = {
                    reply_markup: {
                        inline_keyboard: [
                            [{ text: 'üíµ –°–æ–±—Ä–∞—Ç—å', callback_data: 'collect' }],
                            [{ text: '‚ö° –£–ª—É—á—à–∏—Ç—å –º–∞–π–Ω–∏–Ω–≥', callback_data: 'upgrade' }]
                        ]
                    }
                };
                
                bot.sendMessage(
                    userId,
                    `‚õèÔ∏è –ú–∞–π–Ω–∏–Ω–≥ –∞–∫—Ç–∏–≤–µ–Ω!\n` +
                    `–ë–∞–ª–∞–Ω—Å: ${updatedUser.miningBalance.toFixed(10)} TON\n` +
                    `–°–∫–æ—Ä–æ—Å—Ç—å: ${updatedUser.miningRate.toFixed(10)} TON/5 —Å–µ–∫`,
                    keyboard
                );
            }
            break;

        case 'üìù –ó–∞–¥–∞–Ω–∏—è':
            await handleTasks(userId);
            break;

        case 'üí∞ –ë–∞–ª–∞–Ω—Å':
            await updateMiningBalance(userId);
            const updatedUser = await db.getUser(userId);
            
            const balanceMsg = `üë§ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:\n\n` +
                `ID: <code>${userId}</code>\n` +
                `Username: @${updatedUser.username}\n` +
                `–ë–∞–ª–∞–Ω—Å: ${updatedUser.balance.toFixed(6)} TON\n\n` +
                `–ú–∞–π–Ω–∏–Ω–≥: ${updatedUser.miningBalance.toFixed(6)} TON`;

            const keyboard = {
                reply_markup: {
                    inline_keyboard: [[{ 
                        text: 'üí∏ –í—ã–≤–µ—Å—Ç–∏', 
                        callback_data: 'withdraw' 
                    }]]
                }
            };
            bot.sendMessage(userId, balanceMsg, { parse_mode: 'HTML', ...keyboard });
            break;
    }
});


// –ö–æ–ª–±—ç–∫–∏ –¥–ª—è –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫
bot.on('callback_query', async (query) => {
    const userId = query.from.id;
    const user = await db.getUser(userId);
    if (!user) return;

    const data = query.data;

    if (data === 'collect') {
        await updateMiningBalance(userId);
        const updatedUser = await db.getUser(userId);
        
        if (updatedUser.miningBalance >= 0.00001) {
            const collected = updatedUser.miningBalance;
            await db.updateUser(userId, (u) => {
                u.balance += collected;
                u.miningBalance = 0;
                u.lastMiningUpdate = Date.now();
            });
            
            bot.answerCallbackQuery(query.id, {
                text: `‚úÖ –°–æ–±—Ä–∞–Ω–æ ${collected.toFixed(6)} TON!`,
                show_alert: true
            });
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            bot.editMessageText(
                `‚õèÔ∏è –ú–∞–π–Ω–∏–Ω–≥ –∞–∫—Ç–∏–≤–µ–Ω!\n–ë–∞–ª–∞–Ω—Å: 0.0000000000 TON\n–°–∫–æ—Ä–æ—Å—Ç—å: ${updatedUser.miningRate.toFixed(10)} TON/5 —Å–µ–∫`,
                {
                    chat_id: query.message.chat.id,
                    message_id: query.message.message_id
                }
            );
        } else {
            bot.answerCallbackQuery(query.id, {
                text: '‚ùå –ú–∏–Ω–∏–º—É–º 0.00001 TON –¥–ª—è —Å–±–æ—Ä–∞',
                show_alert: true
            });
        }
    } 
    else if (data === 'upgrade') {
        const message = `üí≥ –î–ª—è —É–ª—É—á—à–µ–Ω–∏—è –º–∞–π–Ω–∏–Ω–≥–∞:\n\n` +
            `–ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ 0.5 TON –Ω–∞ –∞–¥—Ä–µ—Å:\n` +
            `<code>${PAYMENT_ADDRESS}</code>\n\n` +
            `–í –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –∏–≥—Ä–æ–≤–æ–π ID !` +
            `‚ö†Ô∏è –ë–µ–∑ –≤–∞—à–µ–≥–æ ID —Å—Ä–µ–¥—Å—Ç–≤–∞ –Ω–µ –∑–∞—á–∏—Å–ª—è—Ç—Å—è!`;

        const keyboard = {
            reply_markup: {
                inline_keyboard: [[{ 
                    text: '‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª', 
                    callback_data: 'payment_done' 
                }]]
            }
        };
        
        bot.sendMessage(userId, message, { 
            parse_mode: 'HTML',
            ...keyboard,
            disable_web_page_preview: true
        });
    } 
     else if (data === 'payment_done') {
        bot.answerCallbackQuery(query.id, {
            text: 'üïí –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–ª–∞—Ç–µ–∂... –≠—Ç–æ –∑–∞–π–º–µ—Ç –¥–æ 15 –º–∏–Ω—É—Ç',
            show_alert: true
        });
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –ø–ª–∞—Ç–µ–∂–∞
        setTimeout(async () => {
            const paymentVerified = await ton.checkPayment(PAYMENT_ADDRESS, 0.5, PAYMENT_COMMENT);
            if (paymentVerified) {
                await db.updateUser(userId, (u) => {
                    u.miningRate += 0.0001000000;
                    u.upgraded = true;
                });
                bot.sendMessage(userId, '‚úÖ –ü–ª–∞—Ç–µ–∂ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω! –°–∫–æ—Ä–æ—Å—Ç—å –º–∞–π–Ω–∏–Ω–≥–∞ —É–≤–µ–ª–∏—á–µ–Ω–∞!');
            } else {
                bot.sendMessage(userId, '‚ùå –ü–ª–∞—Ç–µ–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.');
            }
        }, 30000);
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –ø–ª–∞—Ç–µ–∂–∞
        checkPaymentWithRetry(userId, 10); // 10 –ø–æ–ø—ã—Ç–æ–∫ —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º 1 –º–∏–Ω—É—Ç–∞
    } 
    else if (data === 'withdraw') {
        if (user.balance >= 0.35) {
            if (user.upgraded) {
                bot.sendMessage(userId, 'üìù –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∞–¥—Ä–µ—Å TON –∫–æ—à–µ–ª—å–∫–∞:');
                bot.once('message', async (msg) => {
                    const walletAddress = msg.text.trim();
                    
                    // –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥—Ä–µ—Å–∞
                    if (!walletAddress.startsWith('UQ') || walletAddress.length < 48) {
                        return bot.sendMessage(userId, '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∞–¥—Ä–µ—Å–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∞–¥—Ä–µ—Å –≤ —Ñ–æ—Ä–º–∞—Ç–µ UQ...');
                    }
                    
                    bot.sendMessage(userId, `üí≥ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –≤—ã–≤–æ–¥–∞ (–º–∏–Ω. 0.35 TON, –º–∞–∫—Å–∏–º—É–º ${user.balance.toFixed(6)} TON):`);
                    bot.once('message', async (msg) => {
                        const amount = parseFloat(msg.text);
                        if (isNaN(amount)) {
                            return bot.sendMessage(userId, '‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ');
                        }
                        
                        if (amount < 0.35) {
                            return bot.sendMessage(userId, '‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –≤—ã–≤–æ–¥–∞ 0.35 TON');
                        }
                        
                        if (amount > user.balance) {
                            return bot.sendMessage(userId, `‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤. –í–∞—à –±–∞–ª–∞–Ω—Å: ${user.balance.toFixed(6)} TON`);
                        }
                        
                        try {
                            bot.sendMessage(userId, 'üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞...');
                            
                            await db.updateUser(userId, (u) => {
                                u.balance -= amount;
                            });
                    
                            
                            bot.sendMessage(userId, 
                                `‚úÖ –ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥ ${amount.toFixed(6)} TON –ø—Ä–∏–Ω—è—Ç!\n` +
                                `–°—Ä–µ–¥—Å—Ç–≤–∞ –ø–æ—Å—Ç—É–ø—è—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ 15 –º–∏–Ω—É—Ç –Ω–∞ –∞–¥—Ä–µ—Å:\n` +
                                `<code>${walletAddress}</code>`,
                                { parse_mode: 'HTML' }
                            );
                            
                            // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
                            bot.sendMessage(ADMIN_ID, 
                                `‚ö†Ô∏è –ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥!\n` +
                                `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @${user.username} (${user.id})\n` +
                                `–°—É–º–º–∞: ${amount.toFixed(6)} TON\n` +
                                `–ê–¥—Ä–µ—Å: ${walletAddress}`
                            );
                        } catch (e) {
                            console.error('Withdrawal error:', e);
                            bot.sendMessage(userId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤—ã–≤–æ–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
                        }
                    });
                });
            } else {
                bot.answerCallbackQuery(query.id, {
                    text: '‚ùå –î–ª—è –≤—ã–≤–æ–¥–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–ª—É—á—à–∏—Ç—å –º–∞–π–Ω–∏–Ω–≥!',
                    show_alert: true
                });
            }
        } else {
            bot.answerCallbackQuery(query.id, {
                text: `‚ùå –ú–∏–Ω–∏–º—É–º 0.35 TON –¥–ª—è –≤—ã–≤–æ–¥–∞! –í–∞—à –±–∞–ª–∞–Ω—Å: ${user.balance.toFixed(6)} TON`,
                show_alert: true
            });
        }
    } 
    else if (data === 'next_task') {
        await handleTasks(userId);
    } 
    else if (data.startsWith('check_task_')) {
        const taskId = data.split('_')[2];
        await handleTaskVerification(userId, taskId, query);
    }
else if (data === 'add_task') {
    bot.sendMessage(userId, '‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ Telegram –∫–∞–Ω–∞–ª –¥–ª—è –Ω–æ–≤–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è:');
    
    bot.once('message', async (msg) => {
        const link = msg.text.trim();
        
        if (!link.startsWith('https://t.me/') && !link.startsWith('@')) {
            return bot.sendMessage(userId, 
                '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Å—ã–ª–∫–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n' +
                '‚Ä¢ https://t.me/username\n' +
                '‚Ä¢ @username'
            );
        }
        
        let normalizedLink = link;
        if (link.startsWith('@')) {
            normalizedLink = `https://t.me/${link.substring(1)}`;
        }
        
        try {
            await bot.getChat(normalizedLink.replace('https://t.me/', '@'));
        } catch (e) {
            return bot.sendMessage(userId, 
                '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–∞–Ω–∞–ª. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å —Å—Å—ã–ª–∫–∏.'
            );
        }
        
        try {
            await db.addTask({
                id: Date.now().toString(),
                link: normalizedLink,
                reward: 0.0000001000
            });
            
            bot.sendMessage(userId, 
                `‚úÖ –ó–∞–¥–∞–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ!\n` +
                `–ö–∞–Ω–∞–ª: ${normalizedLink}\n\n` +
                `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –ø–æ–ª—É—á–∞—Ç +0.0000001000 TON/—Å–µ–∫ –∫ —Å–∫–æ—Ä–æ—Å—Ç–∏ –º–∞–π–Ω–∏–Ω–≥–∞ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É.`
            );
        } catch (e) {
            console.error('Error adding task:', e);
            bot.sendMessage(userId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–¥–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        }
    });
}  
 
     else if (data === 'manage_users') {
    bot.sendMessage(userId, '–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:');
    bot.once('message', async (msg) => {
        const targetUserId = parseInt(msg.text);
        if (isNaN(targetUserId)) {
            return bot.sendMessage(userId, '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.');
        }
        
        const targetUser = await db.getUser(targetUserId);
        if (!targetUser) {
            return bot.sendMessage(userId, '‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.');
        }
        
        adminState[userId] = { targetUserId, action: 'user_management' };
        
        const userInfo = `
üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: 
ID: ${targetUser.id}
Username: @${targetUser.username || 'N/A'}
–ë–∞–ª–∞–Ω—Å: ${targetUser.balance.toFixed(6)} TON
–°–∫–æ—Ä–æ—Å—Ç—å –º–∞–π–Ω–∏–Ω–≥–∞: ${targetUser.miningRate.toFixed(10)} TON/—Å–µ–∫
–£–ª—É—á—à–µ–Ω: ${targetUser.upgraded ? '‚úÖ' : '‚ùå'}
        `;
        
        const keyboard = {
            reply_markup: {
                inline_keyboard: [
                    [{ text: '‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å', callback_data: 'edit_balance' }],
                    [{ text: '‚ö° –ò–∑–º–µ–Ω–∏—Ç—å —Å–∫–æ—Ä–æ—Å—Ç—å', callback_data: 'edit_mining_rate' }],
                    [{ text: 'üÜô –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —É–ª—É—á—à–µ–Ω–∏–µ', callback_data: 'set_upgraded' }],
                    [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'admin_back' }]
                ]
            }
        };
        
        bot.sendMessage(userId, userInfo, keyboard);
    });
}

    else if (data === 'edit_balance') {
        const targetUserId = adminState[userId]?.targetUserId;
        if (!targetUserId) return;
        
        bot.sendMessage(userId, `–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${targetUserId}:`);
        adminState[userId] = { 
            ...adminState[userId], 
            action: 'edit_balance' 
        };
    }
    else if (data === 'edit_mining_rate') {
        const targetUserId = adminState[userId]?.targetUserId;
        if (!targetUserId) return;
        
        bot.sendMessage(userId, `–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Å–∫–æ—Ä–æ—Å—Ç—å –º–∞–π–Ω–∏–Ω–≥–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${targetUserId}:`);
        adminState[userId] = { 
            ...adminState[userId], 
            action: 'edit_mining_rate' 
        };
    }
    else if (data === 'set_upgraded') {
        const targetUserId = adminState[userId]?.targetUserId;
        if (!targetUserId) return;
        
        await db.updateUser(targetUserId, (u) => {
            u.upgraded = true;
        });
        bot.sendMessage(userId, `‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${targetUserId} –ø–æ–ª—É—á–∏–ª —É–ª—É—á—à–µ–Ω–∏–µ!`);
        delete adminState[userId];
    }
    else if (data === 'admin_back') {
        delete adminState[userId];
        bot.sendMessage(userId, '–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ');
    }
});

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫ –Ω–∞ –∫–∞–Ω–∞–ª—ã
async function checkSubscriptions(userId) {
    for (const channel of CHANNELS) {
        try {
            const member = await bot.getChatMember(channel, userId);
            if (member.status !== 'member' && 
                member.status !== 'administrator' && 
                member.status !== 'creator') {
                return false;
            }
        } catch (e) {
            console.error(`Error checking channel ${channel}:`, e);
            // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å, —Å—á–∏—Ç–∞–µ–º —á—Ç–æ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω
            return false;
        }
    }
    return true;
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –º–∞–π–Ω–∏–Ω–≥–∞
async function updateMiningBalance(userId) {
    const user = await db.getUser(userId);
    if (!user || !user.miningActive) return;
    
    const now = Date.now();
    const timeDiff = (now - user.lastMiningUpdate) / 1000; // –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
    const cycles = Math.floor(timeDiff / 5);
    
    if (cycles > 0) {
        const earned = cycles * user.miningRate;
        await db.updateUser(userId, (u) => {
            u.miningBalance += earned;
            u.lastMiningUpdate = now;
        });
    }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–¥–∞–Ω–∏–π
async function handleTasks(userId) {
    const user = await db.getUser(userId);
    const tasks = await db.getTasks();
    const availableTasks = tasks.filter(t => !user.tasksCompleted.includes(t.id));

    if (availableTasks.length === 0) {
        bot.sendMessage(userId, 'üì≠ –ó–∞–¥–∞–Ω–∏—è –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å. –ñ–¥–∏—Ç–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π!');
        return;
    }

    const task = availableTasks[0];
    const keyboard = {
        reply_markup: {
            inline_keyboard: [
                [{ text: 'üîó –ü–µ—Ä–µ–π—Ç–∏', url: task.link }],
                [
                    { text: '‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å', callback_data: `check_task_${task.id}` },
                    { text: '‚è≠ –°–ª–µ–¥—É—é—â–µ–µ', callback_data: 'next_task' }
                ]
            ]
        }
    };
    
    bot.sendMessage(
        userId, 
        `üìù –ó–∞–¥–∞–Ω–∏–µ:\n\n–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª:\n${task.link}\n\n–ù–∞–≥—Ä–∞–¥–∞: +${task.reward.toFixed(10)} TON/—Å–µ–∫ –∫ —Å–∫–æ—Ä–æ—Å—Ç–∏ –º–∞–π–Ω–∏–Ω–≥–∞`,
        { ...keyboard, disable_web_page_preview: true }
    );
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è
// –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è
async function handleTaskVerification(userId, taskId, query) {
    try {
        // –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –Ω–∞—á–∞–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
        await bot.answerCallbackQuery(query.id, { text: '‚è≥ –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É...' });
        
        const user = await db.getUser(userId);
        if (!user) return;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –ª–∏ —É–∂–µ –∑–∞–¥–∞–Ω–∏–µ
        if (user.tasksCompleted.includes(taskId)) {
            await bot.answerCallbackQuery(query.id, {
                text: '‚ùå –í—ã —É–∂–µ –≤—ã–ø–æ–ª–Ω–∏–ª–∏ —ç—Ç–æ –∑–∞–¥–∞–Ω–∏–µ!',
                show_alert: true
            });
            return;
        }

        const tasks = await db.getTasks();
        const task = tasks.find(t => t.id === taskId);
        if (!task) {
            await bot.answerCallbackQuery(query.id, {
                text: '‚ùå –ó–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ',
                show_alert: true
            });
            return;
        }
        
        const channelUsername = task.link.split('/').pop().replace('@', '');
        
        try {
            const member = await bot.getChatMember(`@${channelUsername}`, userId);
            if (['member', 'administrator', 'creator'].includes(member.status)) {
                // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                await db.updateUser(userId, (u) => {
                    u.miningRate += task.reward;
                    u.tasksCompleted.push(taskId);
                });
                
                // –û—Ç–∫–ª—é—á–∞–µ–º –∫–Ω–æ–ø–∫–∏ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
                await bot.editMessageReplyMarkup(
                    { inline_keyboard: [] },
                    {
                        chat_id: query.message.chat.id,
                        message_id: query.message.message_id
                    }
                );
                
                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                await bot.answerCallbackQuery(query.id, {
                    text: `‚úÖ –í—ã –ø–æ–ª—É—á–∏–ª–∏ +${task.reward.toFixed(10)} TON/—Å–µ–∫!`,
                    show_alert: true
                });
                
                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–¥–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
                await bot.sendMessage(
                    userId, 
                    `üéâ –ó–∞–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ!\n` +
                    `–í—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª: ${task.link}\n` +
                    `–¢–µ–ø–µ—Ä—å –≤–∞—à–∞ —Å–∫–æ—Ä–æ—Å—Ç—å –º–∞–π–Ω–∏–Ω–≥–∞: ${(user.miningRate + task.reward).toFixed(10)} TON/—Å–µ–∫`
                );
            } else {
                await bot.answerCallbackQuery(query.id, {
                    text: '‚ùå –í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–∞–Ω–∞–ª. –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.',
                    show_alert: true
                });
            }
        } catch (e) {
            console.error('Task verification error:', e);
            await bot.answerCallbackQuery(query.id, {
                text: '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
                show_alert: true
            });
        }
    } catch (e) {
        console.error('Error in task verification:', e);
        await bot.answerCallbackQuery(query.id, {
            text: '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
            show_alert: true
        });
    }
}

// –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
bot.onText(/\/panel/, async (msg) => {
    if (msg.from.id !== ADMIN_ID) return;
    
    const keyboard = {
        reply_markup: {
            inline_keyboard: [
                [{ text: 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', callback_data: 'stats' }],
                [{ text: '‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ', callback_data: 'add_task' }],
                [{ text: 'üë§ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏', callback_data: 'manage_users' }]
            ]
        }
    };
    
    bot.sendMessage(msg.from.id, 'üëë –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:', keyboard);
});

// –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–ª–∞—Ç–µ–∂–µ–π
async function checkPaymentWithRetry(userId, attempts) {
    if (attempts <= 0) {
        bot.sendMessage(userId, '‚ùå –ü–ª–∞—Ç–µ–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.');
        return;
    }
    
    try {
        const paymentVerified = await ton.checkPayment(PAYMENT_ADDRESS, 0.5, PAYMENT_COMMENT);
        if (paymentVerified) {
            await db.updateUser(userId, (u) => {
                u.miningRate += 0.0001000000;
                u.upgraded = true;
            });
            bot.sendMessage(userId, '‚úÖ –ü–ª–∞—Ç–µ–∂ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω! –°–∫–æ—Ä–æ—Å—Ç—å –º–∞–π–Ω–∏–Ω–≥–∞ —É–≤–µ–ª–∏—á–µ–Ω–∞!');
            return;
        }
    } catch (e) {
        console.error('Payment check error:', e);
    }
    
    // –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ 1 –º–∏–Ω—É—Ç—É
    setTimeout(() => {
        checkPaymentWithRetry(userId, attempts - 1);
    }, 60000);
}

// –ó–∞–ø—É—Å–∫ –º–∞–π–Ω–∏–Ω–≥-—Ç–∞–π–º–µ—Ä–∞
setInterval(async () => {
    try {
        const users = await db.getAllUsers();
        const now = Date.now();
        
        for (const user of users) {
            if (user.miningActive) {
                const timeDiff = (now - user.lastMiningUpdate) / 1000;
                const cycles = Math.floor(timeDiff / 5);
                
                if (cycles > 0) {
                    const earned = cycles * user.miningRate;
                    await db.updateUser(user.id, (u) => {
                        u.miningBalance += earned;
                        u.lastMiningUpdate = now;
                    });
                }
            }
        }
    } catch (e) {
        console.error('Mining interval error:', e);
    }
}, 30000); // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥

console.log('ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!');