const { Level } = require('level');
const path = require('path');

const dbPath = path.join(__dirname, 'tonkoin-db');
const db = new Level(dbPath, { valueEncoding: 'json' });

class Database {
    // Пользователи
    async getUser(userId) {
        try {
            return await db.get(`user_${userId}`);
        } catch (e) {
            return null;
        }
    }

    async saveUser(user) {
        await db.put(`user_${user.id}`, user);
    }

async findUserByUsername(username) {
    const users = [];
    for await (const [key, value] of db.iterator()) {
        if (key.startsWith('user_')) {
            const user = JSON.parse(value);
            if (user.username && user.username.toLowerCase() === username.toLowerCase()) {
                users.push(user);
            }
        }
    }
    return users;
}

    async updateUser(userId, updateFn) {
        const user = await this.getUser(userId) || {
            id: userId,
            balance: 0,
            miningBalance: 0,
            miningRate: 0.0000001000,
            upgraded: false,
            miningActive: false,
            tasksCompleted: [],
            lastMiningUpdate: Date.now()
        };
        
        updateFn(user);
        await this.saveUser(user);
        return user;
    }

    // Рефералы
    async addReferral(inviterId, referralId) {
        const key = `ref_${inviterId}_${referralId}`;
        await db.put(key, '1');
    }

    async getReferralsCount(userId) {
        let count = 0;
        for await (const [key] of db.keys({ 
            gte: `ref_${userId}_`, 
            lte: `ref_${userId}_\xff` 
        })) {
            count++;
        }
        return count;
    }

    // Задания
    async addTask(task) {
        const tasks = await this.getTasks();
        tasks.push(task);
        await db.put('tasks', tasks);
    }

    async getTasks() {
        try {
            return await db.get('tasks') || [];
        } catch (e) {
            return [];
        }
    }

    // Получение всех пользователей
    async getAllUsers() {
        const users = [];
        for await (const [key, value] of db.iterator({ 
            gt: 'user_', 
            lte: 'user_\xff' 
        })) {
            users.push(value);
        }
        return users;
    }
}

module.exports = new Database();





























<!DOCTYPE html>
<html lang="ru">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>TonKoin Monitor</title>
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
  <link href="https://fonts.googleapis.com/css2?family=Roboto:wght@300;400;500;700&display=swap" rel="stylesheet">
  <style>
    :root {
      --primary: #4361ee;
      --secondary: #3f37c9;
      --dark: #1b263b;
      --light: #f8f9fa;
      --success: #4cc9f0;
      --warning: #f8961e;
      --danger: #ef233c;
    }
    
    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
      font-family: 'Roboto', sans-serif;
    }
    
    body {
      background-color: #f5f7fa;
      color: #333;
      line-height: 1.6;
    }
    
    .container {
      max-width: 1400px;
      margin: 0 auto;
      padding: 20px;
    }
    
    header {
      background: linear-gradient(135deg, var(--primary), var(--secondary));
      color: white;
      padding: 20px 0;
      margin-bottom: 30px;
      border-radius: 8px;
      box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    }
    
    header h1 {
      display: flex;
      align-items: center;
      justify-content: center;
      gap: 15px;
      font-size: 2.2rem;
    }
    
    .stats {
      display: grid;
      grid-template-columns: repeat(3, 1fr);
      gap: 20px;
      margin-bottom: 30px;
    }
    
    .stat-card {
      background: white;
      border-radius: 8px;
      padding: 20px;
      box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
      display: flex;
      align-items: center;
      gap: 15px;
    }
    
    .stat-icon {
      font-size: 2rem;
      width: 60px;
      height: 60px;
      border-radius: 50%;
      display: flex;
      align-items: center;
      justify-content: center;
      color: white;
    }
    
    .users .stat-icon { background: var(--primary); }
    .referrals .stat-icon { background: var(--success); }
    .tasks .stat-icon { background: var(--warning); }
    
    .stat-info h3 {
      font-size: 1.2rem;
      margin-bottom: 5px;
      color: var(--dark);
    }
    
    .stat-info p {
      font-size: 1.8rem;
      font-weight: 700;
    }
    
    .tables {
      display: grid;
      grid-template-columns: 1fr;
      gap: 30px;
    }
    
    .table-container {
      background: white;
      border-radius: 8px;
      padding: 20px;
      box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
      overflow-x: auto;
    }
    
    table {
      width: 100%;
      border-collapse: collapse;
    }
    
    th {
      background-color: var(--primary);
      color: white;
      padding: 12px 15px;
      text-align: left;
    }
    
    td {
      padding: 12px 15px;
      border-bottom: 1px solid #eee;
    }
    
    tr:hover {
      background-color: #f8f9fa;
    }
    
    .badge {
      display: inline-block;
      padding: 3px 8px;
      border-radius: 20px;
      font-size: 0.8rem;
      font-weight: 500;
    }
    
    .badge-success {
      background: #e6f7ee;
      color: #00a854;
    }
    
    .badge-warning {
      background: #fff7e6;
      color: #fa8c16;
    }
    
    .badge-danger {
      background: #fff1f0;
      color: #f5222d;
    }
    
    .status {
      display: flex;
      align-items: center;
      gap: 5px;
    }
    
    .online {
      color: var(--success);
    }
    
    .offline {
      color: var(--danger);
    }
    
    .last-update {
      text-align: right;
      margin-top: 20px;
      font-size: 0.9rem;
      color: #666;
    }
    
    @media (max-width: 768px) {
      .stats {
        grid-template-columns: 1fr;
      }
    }
  </style>
</head>
<body>
  <div class="container">
    <header>
      <h1>
        <i class="fas fa-coins"></i>
        TonKoin Monitor
      </h1>
    </header>
    
    <div class="stats">
      <div class="stat-card users">
        <div class="stat-icon">
          <i class="fas fa-users"></i>
        </div>
        <div class="stat-info">
          <h3>Пользователи</h3>
          <p id="users-count">0</p>
        </div>
      </div>
      
      <div class="stat-card referrals">
        <div class="stat-icon">
          <i class="fas fa-handshake"></i>
        </div>
        <div class="stat-info">
          <h3>Рефералы</h3>
          <p id="referrals-count">0</p>
        </div>
      </div>
      
      <div class="stat-card tasks">
        <div class="stat-icon">
          <i class="fas fa-tasks"></i>
        </div>
        <div class="stat-info">
          <h3>Задания</h3>
          <p id="tasks-count">0</p>
        </div>
      </div>
    </div>
    
    <div class="tables">
      <div class="table-container">
        <h2><i class="fas fa-user"></i> Пользователи</h2>
        <table id="users-table">
          <thead>
            <tr>
              <th>ID</th>
              <th>Баланс</th>
              <th>Майнинг</th>
              <th>Статус</th>
              <th>Последняя активность</th>
            </tr>
          </thead>
          <tbody></tbody>
        </table>
      </div>
      
      <div class="table-container">
        <h2><i class="fas fa-network-wired"></i> Реферальные связи</h2>
        <table id="referrals-table">
          <thead>
            <tr>
              <th>Пригласитель</th>
              <th>Реферал</th>
              <th>Дата</th>
            </tr>
          </thead>
          <tbody></tbody>
        </table>
      </div>
      
      <div class="table-container">
        <h2><i class="fas fa-list-check"></i> Задания</h2>
        <table id="tasks-table">
          <thead>
            <tr>
              <th>ID</th>
              <th>Название</th>
              <th>Статус</th>
            </tr>
          </thead>
          <tbody></tbody>
        </table>
      </div>
    </div>
    
    <div class="last-update">
      <i class="fas fa-sync-alt"></i> Последнее обновление: <span id="update-time">--:--:--</span>
    </div>
  </div>

  <script>
    const ws = new WebSocket(`ws://${window.location.hostname}:3000`);
    
    ws.onmessage = (event) => {
      const data = JSON.parse(event.data);
      updateUI(data);
      document.getElementById('update-time').textContent = new Date().toLocaleTimeString();
    };
    
    function updateUI(data) {
      // Обновляем статистику
      document.getElementById('users-count').textContent = data.users.length;
      document.getElementById('referrals-count').textContent = data.referrals.length;
      document.getElementById('tasks-count').textContent = data.tasks.length;
      
      // Обновляем таблицу пользователей
      const usersTable = document.querySelector('#users-table tbody');
      usersTable.innerHTML = data.users.map(user => `
        <tr>
          <td>${user.id}</td>
          <td>${user.balance?.toFixed(8) || 0}</td>
          <td>
            <span class="badge ${user.miningActive ? 'badge-success' : 'badge-warning'}">
              ${user.miningActive ? 'Активен' : 'Неактивен'}
            </span>
          </td>
          <td>
            <div class="status">
              <i class="fas ${user.upgraded ? 'fa-crown' : 'fa-user'} ${user.upgraded ? 'online' : 'offline'}"></i>
              ${user.upgraded ? 'Premium' : 'Basic'}
            </div>
          </td>
          <td>${new Date(user.lastMiningUpdate || Date.now()).toLocaleString()}</td>
        </tr>
      `).join('');
      
      // Обновляем таблицу рефералов
      const referralsTable = document.querySelector('#referrals-table tbody');
      referralsTable.innerHTML = data.referrals.map(ref => `
        <tr>
          <td>${ref.inviterId}</td>
          <td>${ref.referralId}</td>
          <td>${new Date().toLocaleDateString()}</td>
        </tr>
      `).join('');
      
      // Обновляем таблицу заданий
      const tasksTable = document.querySelector('#tasks-table tbody');
      tasksTable.innerHTML = data.tasks.map(task => `
        <tr>
          <td>${task.id || '--'}</td>
          <td>${task.name || 'Неизвестно'}</td>
          <td>
            <span class="badge ${task.completed ? 'badge-success' : 'badge-warning'}">
              ${task.completed ? 'Выполнено' : 'В процессе'}
            </span>
          </td>
        </tr>
      `).join('');
    }
    
    // Первоначальная загрузка
    ws.onopen = () => {
      console.log('Connected to WebSocket server');
    };
    
    ws.onerror = (error) => {
      console.error('WebSocket error:', error);
    };
  </script>
</body>
</html>
